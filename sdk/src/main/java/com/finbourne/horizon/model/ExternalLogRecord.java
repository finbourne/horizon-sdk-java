/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.horizon.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.horizon.JSON;

/**
 * ExternalLogRecord
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExternalLogRecord {
  public static final String SERIALIZED_NAME_LOGID = "logid";
  @SerializedName(SERIALIZED_NAME_LOGID)
  private Long logid;

  public static final String SERIALIZED_NAME_PARENTLOGID = "parentlogid";
  @SerializedName(SERIALIZED_NAME_PARENTLOGID)
  private Long parentlogid;

  public static final String SERIALIZED_NAME_LOGLEVEL = "loglevel";
  @SerializedName(SERIALIZED_NAME_LOGLEVEL)
  private String loglevel;

  public static final String SERIALIZED_NAME_LOGSTATUS = "logstatus";
  @SerializedName(SERIALIZED_NAME_LOGSTATUS)
  private String logstatus;

  public static final String SERIALIZED_NAME_SOURCERECORDTYPE = "sourcerecordtype";
  @SerializedName(SERIALIZED_NAME_SOURCERECORDTYPE)
  private String sourcerecordtype;

  public static final String SERIALIZED_NAME_SOURCEPRIMARYIDTYPE = "sourceprimaryidtype";
  @SerializedName(SERIALIZED_NAME_SOURCEPRIMARYIDTYPE)
  private String sourceprimaryidtype;

  public static final String SERIALIZED_NAME_SOURCEPRIMARYIDVALUE = "sourceprimaryidvalue";
  @SerializedName(SERIALIZED_NAME_SOURCEPRIMARYIDVALUE)
  private String sourceprimaryidvalue;

  public static final String SERIALIZED_NAME_TARGETRECORDTYPE = "targetrecordtype";
  @SerializedName(SERIALIZED_NAME_TARGETRECORDTYPE)
  private String targetrecordtype;

  public static final String SERIALIZED_NAME_TARGETRECORDACTION = "targetrecordaction";
  @SerializedName(SERIALIZED_NAME_TARGETRECORDACTION)
  private String targetrecordaction;

  public static final String SERIALIZED_NAME_TARGETPRIMARYIDTYPE = "targetprimaryidtype";
  @SerializedName(SERIALIZED_NAME_TARGETPRIMARYIDTYPE)
  private String targetprimaryidtype;

  public static final String SERIALIZED_NAME_TARGETPRIMARYIDVALUE = "targetprimaryidvalue";
  @SerializedName(SERIALIZED_NAME_TARGETPRIMARYIDVALUE)
  private String targetprimaryidvalue;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_MESSAGETYPE = "messagetype";
  @SerializedName(SERIALIZED_NAME_MESSAGETYPE)
  private String messagetype;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public ExternalLogRecord() {
  }

  public ExternalLogRecord logid(Long logid) {
    
    this.logid = logid;
    return this;
  }

   /**
   * Get logid
   * @return logid
  **/
  @jakarta.annotation.Nonnull
  public Long getLogid() {
    return logid;
  }


  public void setLogid(Long logid) {
    this.logid = logid;
  }


  public ExternalLogRecord parentlogid(Long parentlogid) {
    
    this.parentlogid = parentlogid;
    return this;
  }

   /**
   * Get parentlogid
   * @return parentlogid
  **/
  @jakarta.annotation.Nullable
  public Long getParentlogid() {
    return parentlogid;
  }


  public void setParentlogid(Long parentlogid) {
    this.parentlogid = parentlogid;
  }


  public ExternalLogRecord loglevel(String loglevel) {
    
    this.loglevel = loglevel;
    return this;
  }

   /**
   * Get loglevel
   * @return loglevel
  **/
  @jakarta.annotation.Nonnull
  public String getLoglevel() {
    return loglevel;
  }


  public void setLoglevel(String loglevel) {
    this.loglevel = loglevel;
  }


  public ExternalLogRecord logstatus(String logstatus) {
    
    this.logstatus = logstatus;
    return this;
  }

   /**
   * Get logstatus
   * @return logstatus
  **/
  @jakarta.annotation.Nonnull
  public String getLogstatus() {
    return logstatus;
  }


  public void setLogstatus(String logstatus) {
    this.logstatus = logstatus;
  }


  public ExternalLogRecord sourcerecordtype(String sourcerecordtype) {
    
    this.sourcerecordtype = sourcerecordtype;
    return this;
  }

   /**
   * Get sourcerecordtype
   * @return sourcerecordtype
  **/
  @jakarta.annotation.Nullable
  public String getSourcerecordtype() {
    return sourcerecordtype;
  }


  public void setSourcerecordtype(String sourcerecordtype) {
    this.sourcerecordtype = sourcerecordtype;
  }


  public ExternalLogRecord sourceprimaryidtype(String sourceprimaryidtype) {
    
    this.sourceprimaryidtype = sourceprimaryidtype;
    return this;
  }

   /**
   * Get sourceprimaryidtype
   * @return sourceprimaryidtype
  **/
  @jakarta.annotation.Nullable
  public String getSourceprimaryidtype() {
    return sourceprimaryidtype;
  }


  public void setSourceprimaryidtype(String sourceprimaryidtype) {
    this.sourceprimaryidtype = sourceprimaryidtype;
  }


  public ExternalLogRecord sourceprimaryidvalue(String sourceprimaryidvalue) {
    
    this.sourceprimaryidvalue = sourceprimaryidvalue;
    return this;
  }

   /**
   * Get sourceprimaryidvalue
   * @return sourceprimaryidvalue
  **/
  @jakarta.annotation.Nullable
  public String getSourceprimaryidvalue() {
    return sourceprimaryidvalue;
  }


  public void setSourceprimaryidvalue(String sourceprimaryidvalue) {
    this.sourceprimaryidvalue = sourceprimaryidvalue;
  }


  public ExternalLogRecord targetrecordtype(String targetrecordtype) {
    
    this.targetrecordtype = targetrecordtype;
    return this;
  }

   /**
   * Get targetrecordtype
   * @return targetrecordtype
  **/
  @jakarta.annotation.Nullable
  public String getTargetrecordtype() {
    return targetrecordtype;
  }


  public void setTargetrecordtype(String targetrecordtype) {
    this.targetrecordtype = targetrecordtype;
  }


  public ExternalLogRecord targetrecordaction(String targetrecordaction) {
    
    this.targetrecordaction = targetrecordaction;
    return this;
  }

   /**
   * Get targetrecordaction
   * @return targetrecordaction
  **/
  @jakarta.annotation.Nullable
  public String getTargetrecordaction() {
    return targetrecordaction;
  }


  public void setTargetrecordaction(String targetrecordaction) {
    this.targetrecordaction = targetrecordaction;
  }


  public ExternalLogRecord targetprimaryidtype(String targetprimaryidtype) {
    
    this.targetprimaryidtype = targetprimaryidtype;
    return this;
  }

   /**
   * Get targetprimaryidtype
   * @return targetprimaryidtype
  **/
  @jakarta.annotation.Nullable
  public String getTargetprimaryidtype() {
    return targetprimaryidtype;
  }


  public void setTargetprimaryidtype(String targetprimaryidtype) {
    this.targetprimaryidtype = targetprimaryidtype;
  }


  public ExternalLogRecord targetprimaryidvalue(String targetprimaryidvalue) {
    
    this.targetprimaryidvalue = targetprimaryidvalue;
    return this;
  }

   /**
   * Get targetprimaryidvalue
   * @return targetprimaryidvalue
  **/
  @jakarta.annotation.Nullable
  public String getTargetprimaryidvalue() {
    return targetprimaryidvalue;
  }


  public void setTargetprimaryidvalue(String targetprimaryidvalue) {
    this.targetprimaryidvalue = targetprimaryidvalue;
  }


  public ExternalLogRecord message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @jakarta.annotation.Nullable
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public ExternalLogRecord messagetype(String messagetype) {
    
    this.messagetype = messagetype;
    return this;
  }

   /**
   * Get messagetype
   * @return messagetype
  **/
  @jakarta.annotation.Nullable
  public String getMessagetype() {
    return messagetype;
  }


  public void setMessagetype(String messagetype) {
    this.messagetype = messagetype;
  }


  public ExternalLogRecord timestamp(String timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @jakarta.annotation.Nonnull
  public String getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalLogRecord externalLogRecord = (ExternalLogRecord) o;
    return Objects.equals(this.logid, externalLogRecord.logid) &&
        Objects.equals(this.parentlogid, externalLogRecord.parentlogid) &&
        Objects.equals(this.loglevel, externalLogRecord.loglevel) &&
        Objects.equals(this.logstatus, externalLogRecord.logstatus) &&
        Objects.equals(this.sourcerecordtype, externalLogRecord.sourcerecordtype) &&
        Objects.equals(this.sourceprimaryidtype, externalLogRecord.sourceprimaryidtype) &&
        Objects.equals(this.sourceprimaryidvalue, externalLogRecord.sourceprimaryidvalue) &&
        Objects.equals(this.targetrecordtype, externalLogRecord.targetrecordtype) &&
        Objects.equals(this.targetrecordaction, externalLogRecord.targetrecordaction) &&
        Objects.equals(this.targetprimaryidtype, externalLogRecord.targetprimaryidtype) &&
        Objects.equals(this.targetprimaryidvalue, externalLogRecord.targetprimaryidvalue) &&
        Objects.equals(this.message, externalLogRecord.message) &&
        Objects.equals(this.messagetype, externalLogRecord.messagetype) &&
        Objects.equals(this.timestamp, externalLogRecord.timestamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(logid, parentlogid, loglevel, logstatus, sourcerecordtype, sourceprimaryidtype, sourceprimaryidvalue, targetrecordtype, targetrecordaction, targetprimaryidtype, targetprimaryidvalue, message, messagetype, timestamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalLogRecord {\n");
    sb.append("    logid: ").append(toIndentedString(logid)).append("\n");
    sb.append("    parentlogid: ").append(toIndentedString(parentlogid)).append("\n");
    sb.append("    loglevel: ").append(toIndentedString(loglevel)).append("\n");
    sb.append("    logstatus: ").append(toIndentedString(logstatus)).append("\n");
    sb.append("    sourcerecordtype: ").append(toIndentedString(sourcerecordtype)).append("\n");
    sb.append("    sourceprimaryidtype: ").append(toIndentedString(sourceprimaryidtype)).append("\n");
    sb.append("    sourceprimaryidvalue: ").append(toIndentedString(sourceprimaryidvalue)).append("\n");
    sb.append("    targetrecordtype: ").append(toIndentedString(targetrecordtype)).append("\n");
    sb.append("    targetrecordaction: ").append(toIndentedString(targetrecordaction)).append("\n");
    sb.append("    targetprimaryidtype: ").append(toIndentedString(targetprimaryidtype)).append("\n");
    sb.append("    targetprimaryidvalue: ").append(toIndentedString(targetprimaryidvalue)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    messagetype: ").append(toIndentedString(messagetype)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logid");
    openapiFields.add("parentlogid");
    openapiFields.add("loglevel");
    openapiFields.add("logstatus");
    openapiFields.add("sourcerecordtype");
    openapiFields.add("sourceprimaryidtype");
    openapiFields.add("sourceprimaryidvalue");
    openapiFields.add("targetrecordtype");
    openapiFields.add("targetrecordaction");
    openapiFields.add("targetprimaryidtype");
    openapiFields.add("targetprimaryidvalue");
    openapiFields.add("message");
    openapiFields.add("messagetype");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logid");
    openapiRequiredFields.add("loglevel");
    openapiRequiredFields.add("logstatus");
    openapiRequiredFields.add("timestamp");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ExternalLogRecord
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExternalLogRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExternalLogRecord is not found in the empty JSON string", ExternalLogRecord.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExternalLogRecord.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("loglevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loglevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loglevel").toString()));
      }
      if (!jsonObj.get("logstatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logstatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logstatus").toString()));
      }
      if ((jsonObj.get("sourcerecordtype") != null && !jsonObj.get("sourcerecordtype").isJsonNull()) && !jsonObj.get("sourcerecordtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcerecordtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcerecordtype").toString()));
      }
      if ((jsonObj.get("sourceprimaryidtype") != null && !jsonObj.get("sourceprimaryidtype").isJsonNull()) && !jsonObj.get("sourceprimaryidtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceprimaryidtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceprimaryidtype").toString()));
      }
      if ((jsonObj.get("sourceprimaryidvalue") != null && !jsonObj.get("sourceprimaryidvalue").isJsonNull()) && !jsonObj.get("sourceprimaryidvalue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceprimaryidvalue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceprimaryidvalue").toString()));
      }
      if ((jsonObj.get("targetrecordtype") != null && !jsonObj.get("targetrecordtype").isJsonNull()) && !jsonObj.get("targetrecordtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetrecordtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetrecordtype").toString()));
      }
      if ((jsonObj.get("targetrecordaction") != null && !jsonObj.get("targetrecordaction").isJsonNull()) && !jsonObj.get("targetrecordaction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetrecordaction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetrecordaction").toString()));
      }
      if ((jsonObj.get("targetprimaryidtype") != null && !jsonObj.get("targetprimaryidtype").isJsonNull()) && !jsonObj.get("targetprimaryidtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetprimaryidtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetprimaryidtype").toString()));
      }
      if ((jsonObj.get("targetprimaryidvalue") != null && !jsonObj.get("targetprimaryidvalue").isJsonNull()) && !jsonObj.get("targetprimaryidvalue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetprimaryidvalue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetprimaryidvalue").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("messagetype") != null && !jsonObj.get("messagetype").isJsonNull()) && !jsonObj.get("messagetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messagetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messagetype").toString()));
      }
      if (!jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExternalLogRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExternalLogRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExternalLogRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExternalLogRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<ExternalLogRecord>() {
           @Override
           public void write(JsonWriter out, ExternalLogRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExternalLogRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExternalLogRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExternalLogRecord
  * @throws IOException if the JSON string is invalid with respect to ExternalLogRecord
  */
  public static ExternalLogRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExternalLogRecord.class);
  }

 /**
  * Convert an instance of ExternalLogRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
