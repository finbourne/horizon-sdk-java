/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.horizon.model;

import java.util.Objects;
import com.finbourne.horizon.model.AuditFileType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.horizon.JSON;

/**
 * Holds information about Horizon Audit Files
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AuditFileDetails {
  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private AuditFileType fileType;

  public static final String SERIALIZED_NAME_FILE_PATH_AND_NAME = "filePathAndName";
  @SerializedName(SERIALIZED_NAME_FILE_PATH_AND_NAME)
  private String filePathAndName;

  public AuditFileDetails() {
  }

  public AuditFileDetails fileType(AuditFileType fileType) {
    
    this.fileType = fileType;
    return this;
  }

   /**
   * Get fileType
   * @return fileType
  **/
  @jakarta.annotation.Nonnull
  public AuditFileType getFileType() {
    return fileType;
  }


  public void setFileType(AuditFileType fileType) {
    this.fileType = fileType;
  }


  public AuditFileDetails filePathAndName(String filePathAndName) {
    
    this.filePathAndName = filePathAndName;
    return this;
  }

   /**
   * The file path and name
   * @return filePathAndName
  **/
  @jakarta.annotation.Nonnull
  public String getFilePathAndName() {
    return filePathAndName;
  }


  public void setFilePathAndName(String filePathAndName) {
    this.filePathAndName = filePathAndName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditFileDetails auditFileDetails = (AuditFileDetails) o;
    return Objects.equals(this.fileType, auditFileDetails.fileType) &&
        Objects.equals(this.filePathAndName, auditFileDetails.filePathAndName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileType, filePathAndName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditFileDetails {\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    filePathAndName: ").append(toIndentedString(filePathAndName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fileType");
    openapiFields.add("filePathAndName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fileType");
    openapiRequiredFields.add("filePathAndName");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AuditFileDetails
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditFileDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditFileDetails is not found in the empty JSON string", AuditFileDetails.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuditFileDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("filePathAndName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePathAndName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePathAndName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditFileDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditFileDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditFileDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditFileDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditFileDetails>() {
           @Override
           public void write(JsonWriter out, AuditFileDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditFileDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AuditFileDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AuditFileDetails
  * @throws IOException if the JSON string is invalid with respect to AuditFileDetails
  */
  public static AuditFileDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditFileDetails.class);
  }

 /**
  * Convert an instance of AuditFileDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
