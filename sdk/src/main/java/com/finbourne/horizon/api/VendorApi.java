/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.horizon.api;

import com.finbourne.horizon.ApiCallback;
import com.finbourne.horizon.ApiClient;
import com.finbourne.horizon.ApiException;
import com.finbourne.horizon.ApiResponse;
import com.finbourne.horizon.Configuration;
import com.finbourne.horizon.Pair;
import com.finbourne.horizon.ProgressRequestBody;
import com.finbourne.horizon.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.horizon.model.LusidField;
import com.finbourne.horizon.model.LusidProblemDetails;
import com.finbourne.horizon.model.LusidPropertyDefinitionOverrides;
import com.finbourne.horizon.model.LusidPropertyDefinitionOverridesResponse;
import com.finbourne.horizon.model.LusidPropertyToVendorFieldMapping;
import com.finbourne.horizon.model.PagedResourceListOfVendorProduct;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VendorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VendorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VendorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCoreFieldMappingsForProductEntityCall(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/vendor/mappings/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorName", vendorName));
        }

        if (productName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productName", productName));
        }

        if (lusidEntityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lusidEntityType", lusidEntityType));
        }

        if (lusidEntitySubType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lusidEntitySubType", lusidEntitySubType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCoreFieldMappingsForProductEntityValidateBeforeCall(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorName' is set
        if (vendorName == null) {
            throw new ApiException("Missing the required parameter 'vendorName' when calling getCoreFieldMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling getCoreFieldMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'lusidEntityType' is set
        if (lusidEntityType == null) {
            throw new ApiException("Missing the required parameter 'lusidEntityType' when calling getCoreFieldMappingsForProductEntity(Async)");
        }

        return getCoreFieldMappingsForProductEntityCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);

    }


    private ApiResponse<List<LusidField>> getCoreFieldMappingsForProductEntityWithHttpInfo(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType) throws ApiException {
        okhttp3.Call localVarCall = getCoreFieldMappingsForProductEntityValidateBeforeCall(vendorName, productName, lusidEntityType, lusidEntitySubType, null);
        Type localVarReturnType = new TypeToken<List<LusidField>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCoreFieldMappingsForProductEntityAsync(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback<List<LusidField>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCoreFieldMappingsForProductEntityValidateBeforeCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        Type localVarReturnType = new TypeToken<List<LusidField>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetCoreFieldMappingsForProductEntityRequest {
        private final String vendorName;
        private final String productName;
        private final String lusidEntityType;
        private String lusidEntitySubType;

        private APIgetCoreFieldMappingsForProductEntityRequest(String vendorName, String productName, String lusidEntityType) {
            this.vendorName = vendorName;
            this.productName = productName;
            this.lusidEntityType = lusidEntityType;
        }

        /**
         * Set lusidEntitySubType
         * @param lusidEntitySubType  (optional)
         * @return APIgetCoreFieldMappingsForProductEntityRequest
         */
        public APIgetCoreFieldMappingsForProductEntityRequest lusidEntitySubType(String lusidEntitySubType) {
            this.lusidEntitySubType = lusidEntitySubType;
            return this;
        }

        /**
         * Build call for getCoreFieldMappingsForProductEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCoreFieldMappingsForProductEntityCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        }

        /**
         * Execute getCoreFieldMappingsForProductEntity request
         * @return List&lt;LusidField&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<LusidField> execute() throws ApiException {
            ApiResponse<List<LusidField>> localVarResp = getCoreFieldMappingsForProductEntityWithHttpInfo(vendorName, productName, lusidEntityType, lusidEntitySubType);
            return localVarResp.getData();
        }

        /**
         * Execute getCoreFieldMappingsForProductEntity request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LusidField&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LusidField>> executeWithHttpInfo() throws ApiException {
            return getCoreFieldMappingsForProductEntityWithHttpInfo(vendorName, productName, lusidEntityType, lusidEntitySubType);
        }

        /**
         * Execute getCoreFieldMappingsForProductEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LusidField>> _callback) throws ApiException {
            return getCoreFieldMappingsForProductEntityAsync(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetCoreFieldMappingsForProductEntity: Get core field mappings for a given vendor product&#39;s entity.
     * 
     * @param vendorName  (required)
     * @param productName  (required)
     * @param lusidEntityType  (required)
     * @return APIgetCoreFieldMappingsForProductEntityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetCoreFieldMappingsForProductEntityRequest getCoreFieldMappingsForProductEntity(String vendorName, String productName, String lusidEntityType) {
        return new APIgetCoreFieldMappingsForProductEntityRequest(vendorName, productName, lusidEntityType);
    }
    private okhttp3.Call getOptionalMappingsForProductEntityCall(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/vendor/mappings/optional";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorName", vendorName));
        }

        if (productName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productName", productName));
        }

        if (lusidEntityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lusidEntityType", lusidEntityType));
        }

        if (lusidEntitySubType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lusidEntitySubType", lusidEntitySubType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptionalMappingsForProductEntityValidateBeforeCall(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorName' is set
        if (vendorName == null) {
            throw new ApiException("Missing the required parameter 'vendorName' when calling getOptionalMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling getOptionalMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'lusidEntityType' is set
        if (lusidEntityType == null) {
            throw new ApiException("Missing the required parameter 'lusidEntityType' when calling getOptionalMappingsForProductEntity(Async)");
        }

        return getOptionalMappingsForProductEntityCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);

    }


    private ApiResponse<Map<String, LusidPropertyDefinitionOverrides>> getOptionalMappingsForProductEntityWithHttpInfo(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType) throws ApiException {
        okhttp3.Call localVarCall = getOptionalMappingsForProductEntityValidateBeforeCall(vendorName, productName, lusidEntityType, lusidEntitySubType, null);
        Type localVarReturnType = new TypeToken<Map<String, LusidPropertyDefinitionOverrides>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOptionalMappingsForProductEntityAsync(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback<Map<String, LusidPropertyDefinitionOverrides>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptionalMappingsForProductEntityValidateBeforeCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        Type localVarReturnType = new TypeToken<Map<String, LusidPropertyDefinitionOverrides>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOptionalMappingsForProductEntityRequest {
        private final String vendorName;
        private final String productName;
        private final String lusidEntityType;
        private String lusidEntitySubType;

        private APIgetOptionalMappingsForProductEntityRequest(String vendorName, String productName, String lusidEntityType) {
            this.vendorName = vendorName;
            this.productName = productName;
            this.lusidEntityType = lusidEntityType;
        }

        /**
         * Set lusidEntitySubType
         * @param lusidEntitySubType  (optional)
         * @return APIgetOptionalMappingsForProductEntityRequest
         */
        public APIgetOptionalMappingsForProductEntityRequest lusidEntitySubType(String lusidEntitySubType) {
            this.lusidEntitySubType = lusidEntitySubType;
            return this;
        }

        /**
         * Build call for getOptionalMappingsForProductEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOptionalMappingsForProductEntityCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        }

        /**
         * Execute getOptionalMappingsForProductEntity request
         * @return Map&lt;String, LusidPropertyDefinitionOverrides&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, LusidPropertyDefinitionOverrides> execute() throws ApiException {
            ApiResponse<Map<String, LusidPropertyDefinitionOverrides>> localVarResp = getOptionalMappingsForProductEntityWithHttpInfo(vendorName, productName, lusidEntityType, lusidEntitySubType);
            return localVarResp.getData();
        }

        /**
         * Execute getOptionalMappingsForProductEntity request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, LusidPropertyDefinitionOverrides&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, LusidPropertyDefinitionOverrides>> executeWithHttpInfo() throws ApiException {
            return getOptionalMappingsForProductEntityWithHttpInfo(vendorName, productName, lusidEntityType, lusidEntitySubType);
        }

        /**
         * Execute getOptionalMappingsForProductEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, LusidPropertyDefinitionOverrides>> _callback) throws ApiException {
            return getOptionalMappingsForProductEntityAsync(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetOptionalMappingsForProductEntity: Get a user defined LUSID property mappings for the specified vendor / LUSID entity.
     * 
     * @param vendorName  (required)
     * @param productName  (required)
     * @param lusidEntityType  (required)
     * @return APIgetOptionalMappingsForProductEntityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOptionalMappingsForProductEntityRequest getOptionalMappingsForProductEntity(String vendorName, String productName, String lusidEntityType) {
        return new APIgetOptionalMappingsForProductEntityRequest(vendorName, productName, lusidEntityType);
    }
    private okhttp3.Call getPropertyMappingsForProductEntityCall(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/vendor/mappings/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorName", vendorName));
        }

        if (productName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productName", productName));
        }

        if (lusidEntityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lusidEntityType", lusidEntityType));
        }

        if (lusidEntitySubType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lusidEntitySubType", lusidEntitySubType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPropertyMappingsForProductEntityValidateBeforeCall(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorName' is set
        if (vendorName == null) {
            throw new ApiException("Missing the required parameter 'vendorName' when calling getPropertyMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling getPropertyMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'lusidEntityType' is set
        if (lusidEntityType == null) {
            throw new ApiException("Missing the required parameter 'lusidEntityType' when calling getPropertyMappingsForProductEntity(Async)");
        }

        return getPropertyMappingsForProductEntityCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);

    }


    private ApiResponse<List<LusidPropertyToVendorFieldMapping>> getPropertyMappingsForProductEntityWithHttpInfo(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType) throws ApiException {
        okhttp3.Call localVarCall = getPropertyMappingsForProductEntityValidateBeforeCall(vendorName, productName, lusidEntityType, lusidEntitySubType, null);
        Type localVarReturnType = new TypeToken<List<LusidPropertyToVendorFieldMapping>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPropertyMappingsForProductEntityAsync(String vendorName, String productName, String lusidEntityType, String lusidEntitySubType, final ApiCallback<List<LusidPropertyToVendorFieldMapping>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPropertyMappingsForProductEntityValidateBeforeCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        Type localVarReturnType = new TypeToken<List<LusidPropertyToVendorFieldMapping>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPropertyMappingsForProductEntityRequest {
        private final String vendorName;
        private final String productName;
        private final String lusidEntityType;
        private String lusidEntitySubType;

        private APIgetPropertyMappingsForProductEntityRequest(String vendorName, String productName, String lusidEntityType) {
            this.vendorName = vendorName;
            this.productName = productName;
            this.lusidEntityType = lusidEntityType;
        }

        /**
         * Set lusidEntitySubType
         * @param lusidEntitySubType  (optional)
         * @return APIgetPropertyMappingsForProductEntityRequest
         */
        public APIgetPropertyMappingsForProductEntityRequest lusidEntitySubType(String lusidEntitySubType) {
            this.lusidEntitySubType = lusidEntitySubType;
            return this;
        }

        /**
         * Build call for getPropertyMappingsForProductEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPropertyMappingsForProductEntityCall(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        }

        /**
         * Execute getPropertyMappingsForProductEntity request
         * @return List&lt;LusidPropertyToVendorFieldMapping&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<LusidPropertyToVendorFieldMapping> execute() throws ApiException {
            ApiResponse<List<LusidPropertyToVendorFieldMapping>> localVarResp = getPropertyMappingsForProductEntityWithHttpInfo(vendorName, productName, lusidEntityType, lusidEntitySubType);
            return localVarResp.getData();
        }

        /**
         * Execute getPropertyMappingsForProductEntity request with HTTP info returned
         * @return ApiResponse&lt;List&lt;LusidPropertyToVendorFieldMapping&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<LusidPropertyToVendorFieldMapping>> executeWithHttpInfo() throws ApiException {
            return getPropertyMappingsForProductEntityWithHttpInfo(vendorName, productName, lusidEntityType, lusidEntitySubType);
        }

        /**
         * Execute getPropertyMappingsForProductEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<LusidPropertyToVendorFieldMapping>> _callback) throws ApiException {
            return getPropertyMappingsForProductEntityAsync(vendorName, productName, lusidEntityType, lusidEntitySubType, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetPropertyMappingsForProductEntity: Gets the property mappings for a given vendor product&#39;s entity
     * 
     * @param vendorName  (required)
     * @param productName  (required)
     * @param lusidEntityType  (required)
     * @return APIgetPropertyMappingsForProductEntityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPropertyMappingsForProductEntityRequest getPropertyMappingsForProductEntity(String vendorName, String productName, String lusidEntityType) {
        return new APIgetPropertyMappingsForProductEntityRequest(vendorName, productName, lusidEntityType);
    }
    private okhttp3.Call queryVendorsCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/vendor/$query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryVendorsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queryVendors(Async)");
        }

        return queryVendorsCall(body, _callback);

    }


    private ApiResponse<PagedResourceListOfVendorProduct> queryVendorsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = queryVendorsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfVendorProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call queryVendorsAsync(Object body, final ApiCallback<PagedResourceListOfVendorProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryVendorsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfVendorProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIqueryVendorsRequest {
        private final Object body;

        private APIqueryVendorsRequest(Object body) {
            this.body = body;
        }

        /**
         * Build call for queryVendors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return queryVendorsCall(body, _callback);
        }

        /**
         * Execute queryVendors request
         * @return PagedResourceListOfVendorProduct
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfVendorProduct execute() throws ApiException {
            ApiResponse<PagedResourceListOfVendorProduct> localVarResp = queryVendorsWithHttpInfo(body);
            return localVarResp.getData();
        }

        /**
         * Execute queryVendors request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfVendorProduct&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfVendorProduct> executeWithHttpInfo() throws ApiException {
            return queryVendorsWithHttpInfo(body);
        }

        /**
         * Execute queryVendors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfVendorProduct> _callback) throws ApiException {
            return queryVendorsAsync(body, _callback);
        }
    }

    /**
     * [EARLY ACCESS] QueryVendors: Query for vendors and their packages with entities and sub-entities.
     * 
     * @param body  (required)
     * @return APIqueryVendorsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIqueryVendorsRequest queryVendors(Object body) {
        return new APIqueryVendorsRequest(body);
    }
    private okhttp3.Call setOptionalMappingsForProductEntityCall(String vendorName, String productName, String lusidEntityType, Map<String, LusidPropertyDefinitionOverrides> requestBody, String lusidEntitySubType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/vendor/mappings/optional";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorName", vendorName));
        }

        if (productName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productName", productName));
        }

        if (lusidEntityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lusidEntityType", lusidEntityType));
        }

        if (lusidEntitySubType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lusidEntitySubType", lusidEntitySubType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOptionalMappingsForProductEntityValidateBeforeCall(String vendorName, String productName, String lusidEntityType, Map<String, LusidPropertyDefinitionOverrides> requestBody, String lusidEntitySubType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorName' is set
        if (vendorName == null) {
            throw new ApiException("Missing the required parameter 'vendorName' when calling setOptionalMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'productName' is set
        if (productName == null) {
            throw new ApiException("Missing the required parameter 'productName' when calling setOptionalMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'lusidEntityType' is set
        if (lusidEntityType == null) {
            throw new ApiException("Missing the required parameter 'lusidEntityType' when calling setOptionalMappingsForProductEntity(Async)");
        }

        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling setOptionalMappingsForProductEntity(Async)");
        }

        return setOptionalMappingsForProductEntityCall(vendorName, productName, lusidEntityType, requestBody, lusidEntitySubType, _callback);

    }


    private ApiResponse<Map<String, LusidPropertyDefinitionOverridesResponse>> setOptionalMappingsForProductEntityWithHttpInfo(String vendorName, String productName, String lusidEntityType, Map<String, LusidPropertyDefinitionOverrides> requestBody, String lusidEntitySubType) throws ApiException {
        okhttp3.Call localVarCall = setOptionalMappingsForProductEntityValidateBeforeCall(vendorName, productName, lusidEntityType, requestBody, lusidEntitySubType, null);
        Type localVarReturnType = new TypeToken<Map<String, LusidPropertyDefinitionOverridesResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setOptionalMappingsForProductEntityAsync(String vendorName, String productName, String lusidEntityType, Map<String, LusidPropertyDefinitionOverrides> requestBody, String lusidEntitySubType, final ApiCallback<Map<String, LusidPropertyDefinitionOverridesResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setOptionalMappingsForProductEntityValidateBeforeCall(vendorName, productName, lusidEntityType, requestBody, lusidEntitySubType, _callback);
        Type localVarReturnType = new TypeToken<Map<String, LusidPropertyDefinitionOverridesResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetOptionalMappingsForProductEntityRequest {
        private final String vendorName;
        private final String productName;
        private final String lusidEntityType;
        private final Map<String, LusidPropertyDefinitionOverrides> requestBody;
        private String lusidEntitySubType;

        private APIsetOptionalMappingsForProductEntityRequest(String vendorName, String productName, String lusidEntityType, Map<String, LusidPropertyDefinitionOverrides> requestBody) {
            this.vendorName = vendorName;
            this.productName = productName;
            this.lusidEntityType = lusidEntityType;
            this.requestBody = requestBody;
        }

        /**
         * Set lusidEntitySubType
         * @param lusidEntitySubType  (optional)
         * @return APIsetOptionalMappingsForProductEntityRequest
         */
        public APIsetOptionalMappingsForProductEntityRequest lusidEntitySubType(String lusidEntitySubType) {
            this.lusidEntitySubType = lusidEntitySubType;
            return this;
        }

        /**
         * Build call for setOptionalMappingsForProductEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setOptionalMappingsForProductEntityCall(vendorName, productName, lusidEntityType, requestBody, lusidEntitySubType, _callback);
        }

        /**
         * Execute setOptionalMappingsForProductEntity request
         * @return Map&lt;String, LusidPropertyDefinitionOverridesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public Map<String, LusidPropertyDefinitionOverridesResponse> execute() throws ApiException {
            ApiResponse<Map<String, LusidPropertyDefinitionOverridesResponse>> localVarResp = setOptionalMappingsForProductEntityWithHttpInfo(vendorName, productName, lusidEntityType, requestBody, lusidEntitySubType);
            return localVarResp.getData();
        }

        /**
         * Execute setOptionalMappingsForProductEntity request with HTTP info returned
         * @return ApiResponse&lt;Map&lt;String, LusidPropertyDefinitionOverridesResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Map<String, LusidPropertyDefinitionOverridesResponse>> executeWithHttpInfo() throws ApiException {
            return setOptionalMappingsForProductEntityWithHttpInfo(vendorName, productName, lusidEntityType, requestBody, lusidEntitySubType);
        }

        /**
         * Execute setOptionalMappingsForProductEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Map<String, LusidPropertyDefinitionOverridesResponse>> _callback) throws ApiException {
            return setOptionalMappingsForProductEntityAsync(vendorName, productName, lusidEntityType, requestBody, lusidEntitySubType, _callback);
        }
    }

    /**
     * [EARLY ACCESS] SetOptionalMappingsForProductEntity: Create a user defined LUSID property mappings for the specified vendor / LUSID entity.
     * 
     * @param vendorName  (required)
     * @param productName  (required)
     * @param lusidEntityType  (required)
     * @param requestBody  (required)
     * @return APIsetOptionalMappingsForProductEntityRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsetOptionalMappingsForProductEntityRequest setOptionalMappingsForProductEntity(String vendorName, String productName, String lusidEntityType, Map<String, LusidPropertyDefinitionOverrides> requestBody) {
        return new APIsetOptionalMappingsForProductEntityRequest(vendorName, productName, lusidEntityType, requestBody);
    }
}
