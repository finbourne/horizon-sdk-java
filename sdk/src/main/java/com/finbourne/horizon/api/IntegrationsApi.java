/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.horizon.api;

import com.finbourne.horizon.ApiCallback;
import com.finbourne.horizon.ApiClient;
import com.finbourne.horizon.ApiException;
import com.finbourne.horizon.ApiResponse;
import com.finbourne.horizon.Configuration;
import com.finbourne.horizon.Pair;
import com.finbourne.horizon.ProgressRequestBody;
import com.finbourne.horizon.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.horizon.model.CreateInstanceRequest;
import com.finbourne.horizon.model.ExecuteInstanceResponse;
import com.finbourne.horizon.model.InstanceIdentifier;
import com.finbourne.horizon.model.IntegrationDescription;
import com.finbourne.horizon.model.IntegrationInstance;
import com.finbourne.horizon.model.LusidProblemDetails;
import com.finbourne.horizon.model.UpdateInstanceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInstanceCall(CreateInstanceRequest createInstanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInstanceRequest;

        // create path and map variables
        String localVarPath = "/api/integrations/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInstanceValidateBeforeCall(CreateInstanceRequest createInstanceRequest, final ApiCallback _callback) throws ApiException {
        return createInstanceCall(createInstanceRequest, _callback);

    }


    private ApiResponse<InstanceIdentifier> createInstanceWithHttpInfo(CreateInstanceRequest createInstanceRequest) throws ApiException {
        okhttp3.Call localVarCall = createInstanceValidateBeforeCall(createInstanceRequest, null);
        Type localVarReturnType = new TypeToken<InstanceIdentifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInstanceAsync(CreateInstanceRequest createInstanceRequest, final ApiCallback<InstanceIdentifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInstanceValidateBeforeCall(createInstanceRequest, _callback);
        Type localVarReturnType = new TypeToken<InstanceIdentifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateInstanceRequest {
        private CreateInstanceRequest createInstanceRequest;

        private APIcreateInstanceRequest() {
        }

        /**
         * Set createInstanceRequest
         * @param createInstanceRequest The new integration instance. (optional)
         * @return APIcreateInstanceRequest
         */
        public APIcreateInstanceRequest createInstanceRequest(CreateInstanceRequest createInstanceRequest) {
            this.createInstanceRequest = createInstanceRequest;
            return this;
        }

        /**
         * Build call for createInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Identifier of the created instance. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration type does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createInstanceCall(createInstanceRequest, _callback);
        }

        /**
         * Execute createInstance request
         * @return InstanceIdentifier
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Identifier of the created instance. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration type does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public InstanceIdentifier execute() throws ApiException {
            ApiResponse<InstanceIdentifier> localVarResp = createInstanceWithHttpInfo(createInstanceRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createInstance request with HTTP info returned
         * @return ApiResponse&lt;InstanceIdentifier&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Identifier of the created instance. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration type does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InstanceIdentifier> executeWithHttpInfo() throws ApiException {
            return createInstanceWithHttpInfo(createInstanceRequest);
        }

        /**
         * Execute createInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Identifier of the created instance. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration type does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InstanceIdentifier> _callback) throws ApiException {
            return createInstanceAsync(createInstanceRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] CreateInstance: Create a single integration instance.
     * &lt;br&gt;Creates a new instance of an integration, returning its identifier.  &lt;br /&gt;  &lt;br /&gt;  &lt;br&gt;The user must be authenticated, entitled to call this method, and the user&#39;s domain must be licensed for the integration.
     * @return APIcreateInstanceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Identifier of the created instance. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The integration type does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateInstanceRequest createInstance() {
        return new APIcreateInstanceRequest();
    }
    private okhttp3.Call deleteInstanceCall(String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInstanceValidateBeforeCall(String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling deleteInstance(Async)");
        }

        return deleteInstanceCall(instanceId, _callback);

    }


    private ApiResponse<Void> deleteInstanceWithHttpInfo(String instanceId) throws ApiException {
        okhttp3.Call localVarCall = deleteInstanceValidateBeforeCall(instanceId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInstanceAsync(String instanceId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInstanceValidateBeforeCall(instanceId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteInstanceRequest {
        private final String instanceId;

        private APIdeleteInstanceRequest(String instanceId) {
            this.instanceId = instanceId;
        }

        /**
         * Build call for deleteInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The instance was deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInstanceCall(instanceId, _callback);
        }

        /**
         * Execute deleteInstance request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The instance was deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInstanceWithHttpInfo(instanceId);
        }

        /**
         * Execute deleteInstance request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The instance was deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInstanceWithHttpInfo(instanceId);
        }

        /**
         * Execute deleteInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The instance was deleted. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInstanceAsync(instanceId, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] DeleteInstance: Delete a single integration instance.
     * &lt;br&gt;Deletes an existing instance of an integration, returning its identifier.  &lt;br /&gt;  &lt;br /&gt;  &lt;br&gt;The user must be authenticated, entitled to call this method, and the user&#39;s domain must be licensed for the integration.
     * @param instanceId Instance identifier e.g. \&quot;b64135e7-98a0-41af-a845-d86167d54cc7\&quot;. (required)
     * @return APIdeleteInstanceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The instance was deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInstanceRequest deleteInstance(String instanceId) {
        return new APIdeleteInstanceRequest(instanceId);
    }
    private okhttp3.Call executeInstanceCall(String instanceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/instances/{instanceId}/execute"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call executeInstanceValidateBeforeCall(String instanceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling executeInstance(Async)");
        }

        return executeInstanceCall(instanceId, _callback);

    }


    private ApiResponse<ExecuteInstanceResponse> executeInstanceWithHttpInfo(String instanceId) throws ApiException {
        okhttp3.Call localVarCall = executeInstanceValidateBeforeCall(instanceId, null);
        Type localVarReturnType = new TypeToken<ExecuteInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call executeInstanceAsync(String instanceId, final ApiCallback<ExecuteInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = executeInstanceValidateBeforeCall(instanceId, _callback);
        Type localVarReturnType = new TypeToken<ExecuteInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIexecuteInstanceRequest {
        private final String instanceId;

        private APIexecuteInstanceRequest(String instanceId) {
            this.instanceId = instanceId;
        }

        /**
         * Build call for executeInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution id </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return executeInstanceCall(instanceId, _callback);
        }

        /**
         * Execute executeInstance request
         * @return ExecuteInstanceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution id </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ExecuteInstanceResponse execute() throws ApiException {
            ApiResponse<ExecuteInstanceResponse> localVarResp = executeInstanceWithHttpInfo(instanceId);
            return localVarResp.getData();
        }

        /**
         * Execute executeInstance request with HTTP info returned
         * @return ApiResponse&lt;ExecuteInstanceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution id </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExecuteInstanceResponse> executeWithHttpInfo() throws ApiException {
            return executeInstanceWithHttpInfo(instanceId);
        }

        /**
         * Execute executeInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution id </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExecuteInstanceResponse> _callback) throws ApiException {
            return executeInstanceAsync(instanceId, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] ExecuteInstance: Execute an integration instance.
     * &lt;br&gt;Starts execution of an instance, returning its execution identifier.  &lt;br /&gt;  &lt;br /&gt;  &lt;br&gt;The user must be authenticated, entitled to call this method, and the user&#39;s domain must be licensed for the integration.
     * @param instanceId Instance identifier e.g. \&quot;b64135e7-98a0-41af-a845-d86167d54cc7\&quot;. (required)
     * @return APIexecuteInstanceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The execution id </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIexecuteInstanceRequest executeInstance(String instanceId) {
        return new APIexecuteInstanceRequest(instanceId);
    }
    private okhttp3.Call getExecutionIdsForInstanceCall(String instanceId, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/instances/{instanceId}/executions"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExecutionIdsForInstanceValidateBeforeCall(String instanceId, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling getExecutionIdsForInstance(Async)");
        }

        return getExecutionIdsForInstanceCall(instanceId, limit, _callback);

    }


    private ApiResponse<String> getExecutionIdsForInstanceWithHttpInfo(String instanceId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getExecutionIdsForInstanceValidateBeforeCall(instanceId, limit, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExecutionIdsForInstanceAsync(String instanceId, Integer limit, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExecutionIdsForInstanceValidateBeforeCall(instanceId, limit, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExecutionIdsForInstanceRequest {
        private final String instanceId;
        private Integer limit;

        private APIgetExecutionIdsForInstanceRequest(String instanceId) {
            this.instanceId = instanceId;
        }

        /**
         * Set limit
         * @param limit Maximum number of returned execution ids (optional)
         * @return APIgetExecutionIdsForInstanceRequest
         */
        public APIgetExecutionIdsForInstanceRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for getExecutionIdsForInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution ids sorted by start date (descending) </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExecutionIdsForInstanceCall(instanceId, limit, _callback);
        }

        /**
         * Execute getExecutionIdsForInstance request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution ids sorted by start date (descending) </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getExecutionIdsForInstanceWithHttpInfo(instanceId, limit);
            return localVarResp.getData();
        }

        /**
         * Execute getExecutionIdsForInstance request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution ids sorted by start date (descending) </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getExecutionIdsForInstanceWithHttpInfo(instanceId, limit);
        }

        /**
         * Execute getExecutionIdsForInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The execution ids sorted by start date (descending) </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getExecutionIdsForInstanceAsync(instanceId, limit, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GetExecutionIdsForInstance: Get integration instance execution ids.
     * &lt;br&gt;Get the most recent execution ids for an integration instance.  &lt;br /&gt;  &lt;br&gt;The user must be authenticated, entitled to call this method, and the user&#39;s domain must be licensed for the integration.
     * @param instanceId Instance identifier e.g. \&quot;30dc93c6-a127-46bf-aea8-e466d720b72d\&quot;. (required)
     * @return APIgetExecutionIdsForInstanceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The execution ids sorted by start date (descending) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The integration instance does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExecutionIdsForInstanceRequest getExecutionIdsForInstance(String instanceId) {
        return new APIgetExecutionIdsForInstanceRequest(instanceId);
    }
    private okhttp3.Call getSchemaCall(String integration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/schema/{integration}"
            .replace("{" + "integration" + "}", localVarApiClient.escapeString(integration.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaValidateBeforeCall(String integration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integration' is set
        if (integration == null) {
            throw new ApiException("Missing the required parameter 'integration' when calling getSchema(Async)");
        }

        return getSchemaCall(integration, _callback);

    }


    private ApiResponse<String> getSchemaWithHttpInfo(String integration) throws ApiException {
        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(integration, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSchemaAsync(String integration, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemaValidateBeforeCall(integration, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSchemaRequest {
        private final String integration;

        private APIgetSchemaRequest(String integration) {
            this.integration = integration;
        }

        /**
         * Build call for getSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The system defined JSON schema for the details of a specified integration. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration type does not exist or is not enabled. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSchemaCall(integration, _callback);
        }

        /**
         * Execute getSchema request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The system defined JSON schema for the details of a specified integration. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration type does not exist or is not enabled. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getSchemaWithHttpInfo(integration);
            return localVarResp.getData();
        }

        /**
         * Execute getSchema request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The system defined JSON schema for the details of a specified integration. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration type does not exist or is not enabled. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getSchemaWithHttpInfo(integration);
        }

        /**
         * Execute getSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The system defined JSON schema for the details of a specified integration. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The integration type does not exist or is not enabled. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getSchemaAsync(integration, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] GetSchema: Get the JSON schema for the details section of an integration instance.
     * &lt;br&gt;The user must be authenticated, entitled to call this method, and the user&#39;s domain must be licensed for the integration.
     * @param integration The type of the integration e.g. \&quot;copp-clark\&quot;. (required)
     * @return APIgetSchemaRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The system defined JSON schema for the details of a specified integration. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The integration type does not exist or is not enabled. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSchemaRequest getSchema(String integration) {
        return new APIgetSchemaRequest(integration);
    }
    private okhttp3.Call listInstancesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations/instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInstancesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listInstancesCall(_callback);

    }


    private ApiResponse<IntegrationInstance> listInstancesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listInstancesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IntegrationInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInstancesAsync(final ApiCallback<IntegrationInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInstancesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IntegrationInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistInstancesRequest {

        private APIlistInstancesRequest() {
        }

        /**
         * Build call for listInstances
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested instance(s) do not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInstancesCall(_callback);
        }

        /**
         * Execute listInstances request
         * @return IntegrationInstance
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested instance(s) do not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public IntegrationInstance execute() throws ApiException {
            ApiResponse<IntegrationInstance> localVarResp = listInstancesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listInstances request with HTTP info returned
         * @return ApiResponse&lt;IntegrationInstance&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested instance(s) do not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntegrationInstance> executeWithHttpInfo() throws ApiException {
            return listInstancesWithHttpInfo();
        }

        /**
         * Execute listInstances request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The requested instance(s) do not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntegrationInstance> _callback) throws ApiException {
            return listInstancesAsync(_callback);
        }
    }

    /**
     * [EXPERIMENTAL] ListInstances: List instances across all integrations.
     * &lt;br&gt;The user must be authenticated, entitled to call this method, and the user&#39;s domain must be licensed for the integration.
     * @return APIlistInstancesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested instance(s) do not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistInstancesRequest listInstances() {
        return new APIlistInstancesRequest();
    }
    private okhttp3.Call listIntegrationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/integrations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIntegrationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listIntegrationsCall(_callback);

    }


    private ApiResponse<List<IntegrationDescription>> listIntegrationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listIntegrationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<IntegrationDescription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listIntegrationsAsync(final ApiCallback<List<IntegrationDescription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIntegrationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<IntegrationDescription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistIntegrationsRequest {

        private APIlistIntegrationsRequest() {
        }

        /**
         * Build call for listIntegrations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listIntegrationsCall(_callback);
        }

        /**
         * Execute listIntegrations request
         * @return List&lt;IntegrationDescription&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<IntegrationDescription> execute() throws ApiException {
            ApiResponse<List<IntegrationDescription>> localVarResp = listIntegrationsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute listIntegrations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;IntegrationDescription&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<IntegrationDescription>> executeWithHttpInfo() throws ApiException {
            return listIntegrationsWithHttpInfo();
        }

        /**
         * Execute listIntegrations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<IntegrationDescription>> _callback) throws ApiException {
            return listIntegrationsAsync(_callback);
        }
    }

    /**
     * [EXPERIMENTAL] ListIntegrations: List available integrations.
     * &lt;br&gt;List all available integrations.  &lt;br /&gt;  &lt;br&gt;   &#x60;&#x60;&#x60;\&quot;licensed\&quot;&#x60;&#x60;&#x60; indicates your domain is licensed to use this integration. To request a licence   contact your [FINBOURNE sales representative](https://www.finbourne.com/contact/).  &lt;br /&gt;  &lt;br&gt;Any authenticated user can call this method.
     * @return APIlistIntegrationsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistIntegrationsRequest listIntegrations() {
        return new APIlistIntegrationsRequest();
    }
    private okhttp3.Call updateInstanceCall(String instanceId, UpdateInstanceRequest updateInstanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInstanceRequest;

        // create path and map variables
        String localVarPath = "/api/integrations/instances/{instanceId}"
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstanceValidateBeforeCall(String instanceId, UpdateInstanceRequest updateInstanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling updateInstance(Async)");
        }

        return updateInstanceCall(instanceId, updateInstanceRequest, _callback);

    }


    private ApiResponse<Void> updateInstanceWithHttpInfo(String instanceId, UpdateInstanceRequest updateInstanceRequest) throws ApiException {
        okhttp3.Call localVarCall = updateInstanceValidateBeforeCall(instanceId, updateInstanceRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateInstanceAsync(String instanceId, UpdateInstanceRequest updateInstanceRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInstanceValidateBeforeCall(instanceId, updateInstanceRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIupdateInstanceRequest {
        private final String instanceId;
        private UpdateInstanceRequest updateInstanceRequest;

        private APIupdateInstanceRequest(String instanceId) {
            this.instanceId = instanceId;
        }

        /**
         * Set updateInstanceRequest
         * @param updateInstanceRequest The new integration instance. (optional)
         * @return APIupdateInstanceRequest
         */
        public APIupdateInstanceRequest updateInstanceRequest(UpdateInstanceRequest updateInstanceRequest) {
            this.updateInstanceRequest = updateInstanceRequest;
            return this;
        }

        /**
         * Build call for updateInstance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The instance was updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateInstanceCall(instanceId, updateInstanceRequest, _callback);
        }

        /**
         * Execute updateInstance request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The instance was updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateInstanceWithHttpInfo(instanceId, updateInstanceRequest);
        }

        /**
         * Execute updateInstance request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The instance was updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateInstanceWithHttpInfo(instanceId, updateInstanceRequest);
        }

        /**
         * Execute updateInstance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The instance was updated. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateInstanceAsync(instanceId, updateInstanceRequest, _callback);
        }
    }

    /**
     * [EXPERIMENTAL] UpdateInstance: Update a single integration instance.
     * &lt;br&gt;Updates an existing instance of an integration, returning its identifier.  &lt;br /&gt;  &lt;br /&gt;  &lt;br&gt;The user must be authenticated, entitled to call this method, and the user&#39;s domain must be licensed for the integration.
     * @param instanceId Instance identifier e.g. \&quot;b64135e7-98a0-41af-a845-d86167d54cc7\&quot;. (required)
     * @return APIupdateInstanceRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The instance was updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The instance does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateInstanceRequest updateInstance(String instanceId) {
        return new APIupdateInstanceRequest(instanceId);
    }
}
