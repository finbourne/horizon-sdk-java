/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.horizon.api;

import com.finbourne.horizon.ApiCallback;
import com.finbourne.horizon.ApiClient;
import com.finbourne.horizon.ApiException;
import com.finbourne.horizon.ApiResponse;
import com.finbourne.horizon.Configuration;
import com.finbourne.horizon.Pair;
import com.finbourne.horizon.ProgressRequestBody;
import com.finbourne.horizon.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.horizon.model.AuditCompleteRequest;
import com.finbourne.horizon.model.AuditCompleteResponse;
import com.finbourne.horizon.model.AuditUpdateRequest;
import com.finbourne.horizon.model.AuditUpdateResponse;
import com.finbourne.horizon.model.LusidProblemDetails;
import com.finbourne.horizon.model.PagedResourceListOfProcessInformation;
import com.finbourne.horizon.model.PagedResourceListOfProcessUpdateResult;
import com.finbourne.horizon.model.ProcessInformation;
import com.finbourne.horizon.model.QueryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProcessHistoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProcessHistoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProcessHistoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCompleteEventCall(AuditCompleteRequest auditCompleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auditCompleteRequest;

        // create path and map variables
        String localVarPath = "/api/process-history/event/complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompleteEventValidateBeforeCall(AuditCompleteRequest auditCompleteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auditCompleteRequest' is set
        if (auditCompleteRequest == null) {
            throw new ApiException("Missing the required parameter 'auditCompleteRequest' when calling createCompleteEvent(Async)");
        }

        return createCompleteEventCall(auditCompleteRequest, _callback);

    }


    private ApiResponse<AuditCompleteResponse> createCompleteEventWithHttpInfo(AuditCompleteRequest auditCompleteRequest) throws ApiException {
        okhttp3.Call localVarCall = createCompleteEventValidateBeforeCall(auditCompleteRequest, null);
        Type localVarReturnType = new TypeToken<AuditCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCompleteEventAsync(AuditCompleteRequest auditCompleteRequest, final ApiCallback<AuditCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompleteEventValidateBeforeCall(auditCompleteRequest, _callback);
        Type localVarReturnType = new TypeToken<AuditCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateCompleteEventRequest {
        private final AuditCompleteRequest auditCompleteRequest;

        private APIcreateCompleteEventRequest(AuditCompleteRequest auditCompleteRequest) {
            this.auditCompleteRequest = auditCompleteRequest;
        }

        /**
         * Build call for createCompleteEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createCompleteEventCall(auditCompleteRequest, _callback);
        }

        /**
         * Execute createCompleteEvent request
         * @return AuditCompleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AuditCompleteResponse execute() throws ApiException {
            ApiResponse<AuditCompleteResponse> localVarResp = createCompleteEventWithHttpInfo(auditCompleteRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createCompleteEvent request with HTTP info returned
         * @return ApiResponse&lt;AuditCompleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuditCompleteResponse> executeWithHttpInfo() throws ApiException {
            return createCompleteEventWithHttpInfo(auditCompleteRequest);
        }

        /**
         * Execute createCompleteEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuditCompleteResponse> _callback) throws ApiException {
            return createCompleteEventAsync(auditCompleteRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreateCompleteEvent: Write a completed event to the Horizon Dashboard
     * 
     * @param auditCompleteRequest  (required)
     * @return APIcreateCompleteEventRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateCompleteEventRequest createCompleteEvent(AuditCompleteRequest auditCompleteRequest) {
        return new APIcreateCompleteEventRequest(auditCompleteRequest);
    }
    private okhttp3.Call createUpdateEventCall(AuditUpdateRequest auditUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auditUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/process-history/event/update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUpdateEventValidateBeforeCall(AuditUpdateRequest auditUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auditUpdateRequest' is set
        if (auditUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'auditUpdateRequest' when calling createUpdateEvent(Async)");
        }

        return createUpdateEventCall(auditUpdateRequest, _callback);

    }


    private ApiResponse<AuditUpdateResponse> createUpdateEventWithHttpInfo(AuditUpdateRequest auditUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = createUpdateEventValidateBeforeCall(auditUpdateRequest, null);
        Type localVarReturnType = new TypeToken<AuditUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUpdateEventAsync(AuditUpdateRequest auditUpdateRequest, final ApiCallback<AuditUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUpdateEventValidateBeforeCall(auditUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<AuditUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateUpdateEventRequest {
        private final AuditUpdateRequest auditUpdateRequest;

        private APIcreateUpdateEventRequest(AuditUpdateRequest auditUpdateRequest) {
            this.auditUpdateRequest = auditUpdateRequest;
        }

        /**
         * Build call for createUpdateEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createUpdateEventCall(auditUpdateRequest, _callback);
        }

        /**
         * Execute createUpdateEvent request
         * @return AuditUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public AuditUpdateResponse execute() throws ApiException {
            ApiResponse<AuditUpdateResponse> localVarResp = createUpdateEventWithHttpInfo(auditUpdateRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createUpdateEvent request with HTTP info returned
         * @return ApiResponse&lt;AuditUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuditUpdateResponse> executeWithHttpInfo() throws ApiException {
            return createUpdateEventWithHttpInfo(auditUpdateRequest);
        }

        /**
         * Execute createUpdateEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuditUpdateResponse> _callback) throws ApiException {
            return createUpdateEventAsync(auditUpdateRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreateUpdateEvent: Write an update event to the Horizon Dashboard
     * 
     * @param auditUpdateRequest  (required)
     * @return APIcreateUpdateEventRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateUpdateEventRequest createUpdateEvent(AuditUpdateRequest auditUpdateRequest) {
        return new APIcreateUpdateEventRequest(auditUpdateRequest);
    }
    private okhttp3.Call getLatestRunsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/process-history/$latestRuns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestRunsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getLatestRunsCall(_callback);

    }


    private ApiResponse<List<ProcessInformation>> getLatestRunsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getLatestRunsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ProcessInformation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLatestRunsAsync(final ApiCallback<List<ProcessInformation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestRunsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ProcessInformation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLatestRunsRequest {

        private APIgetLatestRunsRequest() {
        }

        /**
         * Build call for getLatestRuns
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLatestRunsCall(_callback);
        }

        /**
         * Execute getLatestRuns request
         * @return List&lt;ProcessInformation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<ProcessInformation> execute() throws ApiException {
            ApiResponse<List<ProcessInformation>> localVarResp = getLatestRunsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getLatestRuns request with HTTP info returned
         * @return ApiResponse&lt;List&lt;ProcessInformation&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<ProcessInformation>> executeWithHttpInfo() throws ApiException {
            return getLatestRunsWithHttpInfo();
        }

        /**
         * Execute getLatestRuns request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<ProcessInformation>> _callback) throws ApiException {
            return getLatestRunsAsync(_callback);
        }
    }

    /**
     * [EARLY ACCESS] GetLatestRuns: Get latest run for each process
     * 
     * @return APIgetLatestRunsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLatestRunsRequest getLatestRuns() {
        return new APIgetLatestRunsRequest();
    }
    private okhttp3.Call processEntryUpdatesCall(QueryRequest queryRequest, String runId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath = "/api/process-history/entries/$query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runId", runId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processEntryUpdatesValidateBeforeCall(QueryRequest queryRequest, String runId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queryRequest' is set
        if (queryRequest == null) {
            throw new ApiException("Missing the required parameter 'queryRequest' when calling processEntryUpdates(Async)");
        }

        return processEntryUpdatesCall(queryRequest, runId, _callback);

    }


    private ApiResponse<PagedResourceListOfProcessUpdateResult> processEntryUpdatesWithHttpInfo(QueryRequest queryRequest, String runId) throws ApiException {
        okhttp3.Call localVarCall = processEntryUpdatesValidateBeforeCall(queryRequest, runId, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfProcessUpdateResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processEntryUpdatesAsync(QueryRequest queryRequest, String runId, final ApiCallback<PagedResourceListOfProcessUpdateResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = processEntryUpdatesValidateBeforeCall(queryRequest, runId, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfProcessUpdateResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIprocessEntryUpdatesRequest {
        private final QueryRequest queryRequest;
        private String runId;

        private APIprocessEntryUpdatesRequest(QueryRequest queryRequest) {
            this.queryRequest = queryRequest;
        }

        /**
         * Set runId
         * @param runId  (optional)
         * @return APIprocessEntryUpdatesRequest
         */
        public APIprocessEntryUpdatesRequest runId(String runId) {
            this.runId = runId;
            return this;
        }

        /**
         * Build call for processEntryUpdates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return processEntryUpdatesCall(queryRequest, runId, _callback);
        }

        /**
         * Execute processEntryUpdates request
         * @return PagedResourceListOfProcessUpdateResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfProcessUpdateResult execute() throws ApiException {
            ApiResponse<PagedResourceListOfProcessUpdateResult> localVarResp = processEntryUpdatesWithHttpInfo(queryRequest, runId);
            return localVarResp.getData();
        }

        /**
         * Execute processEntryUpdates request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfProcessUpdateResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfProcessUpdateResult> executeWithHttpInfo() throws ApiException {
            return processEntryUpdatesWithHttpInfo(queryRequest, runId);
        }

        /**
         * Execute processEntryUpdates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfProcessUpdateResult> _callback) throws ApiException {
            return processEntryUpdatesAsync(queryRequest, runId, _callback);
        }
    }

    /**
     * [EARLY ACCESS] ProcessEntryUpdates: Get process entry updates for a query
     * 
     * @param queryRequest  (required)
     * @return APIprocessEntryUpdatesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIprocessEntryUpdatesRequest processEntryUpdates(QueryRequest queryRequest) {
        return new APIprocessEntryUpdatesRequest(queryRequest);
    }
    private okhttp3.Call processHistoryEntriesCall(QueryRequest queryRequest, String processName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = queryRequest;

        // create path and map variables
        String localVarPath = "/api/process-history/$query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (processName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processName", processName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call processHistoryEntriesValidateBeforeCall(QueryRequest queryRequest, String processName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'queryRequest' is set
        if (queryRequest == null) {
            throw new ApiException("Missing the required parameter 'queryRequest' when calling processHistoryEntries(Async)");
        }

        return processHistoryEntriesCall(queryRequest, processName, _callback);

    }


    private ApiResponse<PagedResourceListOfProcessInformation> processHistoryEntriesWithHttpInfo(QueryRequest queryRequest, String processName) throws ApiException {
        okhttp3.Call localVarCall = processHistoryEntriesValidateBeforeCall(queryRequest, processName, null);
        Type localVarReturnType = new TypeToken<PagedResourceListOfProcessInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call processHistoryEntriesAsync(QueryRequest queryRequest, String processName, final ApiCallback<PagedResourceListOfProcessInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = processHistoryEntriesValidateBeforeCall(queryRequest, processName, _callback);
        Type localVarReturnType = new TypeToken<PagedResourceListOfProcessInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIprocessHistoryEntriesRequest {
        private final QueryRequest queryRequest;
        private String processName;

        private APIprocessHistoryEntriesRequest(QueryRequest queryRequest) {
            this.queryRequest = queryRequest;
        }

        /**
         * Set processName
         * @param processName  (optional)
         * @return APIprocessHistoryEntriesRequest
         */
        public APIprocessHistoryEntriesRequest processName(String processName) {
            this.processName = processName;
            return this;
        }

        /**
         * Build call for processHistoryEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return processHistoryEntriesCall(queryRequest, processName, _callback);
        }

        /**
         * Execute processHistoryEntries request
         * @return PagedResourceListOfProcessInformation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PagedResourceListOfProcessInformation execute() throws ApiException {
            ApiResponse<PagedResourceListOfProcessInformation> localVarResp = processHistoryEntriesWithHttpInfo(queryRequest, processName);
            return localVarResp.getData();
        }

        /**
         * Execute processHistoryEntries request with HTTP info returned
         * @return ApiResponse&lt;PagedResourceListOfProcessInformation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResourceListOfProcessInformation> executeWithHttpInfo() throws ApiException {
            return processHistoryEntriesWithHttpInfo(queryRequest, processName);
        }

        /**
         * Execute processHistoryEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResourceListOfProcessInformation> _callback) throws ApiException {
            return processHistoryEntriesAsync(queryRequest, processName, _callback);
        }
    }

    /**
     * [EARLY ACCESS] ProcessHistoryEntries: Get process history entries
     * 
     * @param queryRequest  (required)
     * @return APIprocessHistoryEntriesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIprocessHistoryEntriesRequest processHistoryEntries(QueryRequest queryRequest) {
        return new APIprocessHistoryEntriesRequest(queryRequest);
    }
}
