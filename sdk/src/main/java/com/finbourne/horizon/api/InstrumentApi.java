/*
 * FINBOURNE Horizon API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.horizon.api;

import com.finbourne.horizon.ApiCallback;
import com.finbourne.horizon.ApiClient;
import com.finbourne.horizon.ApiException;
import com.finbourne.horizon.ApiResponse;
import com.finbourne.horizon.Configuration;
import com.finbourne.horizon.Pair;
import com.finbourne.horizon.ProgressRequestBody;
import com.finbourne.horizon.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.horizon.model.AllowedParameterValue;
import com.finbourne.horizon.model.EnrichmentResponse;
import com.finbourne.horizon.model.Identifiers;
import com.finbourne.horizon.model.LusidProblemDetails;
import com.finbourne.horizon.model.LusidValidationProblemDetails;
import com.finbourne.horizon.model.OnboardInstrumentRequest;
import com.finbourne.horizon.model.OnboardInstrumentResponse;
import com.finbourne.horizon.model.OpenFigiParameterOptionName;
import com.finbourne.horizon.model.OpenFigiSearchResult;
import com.finbourne.horizon.model.PermIdData;
import com.finbourne.horizon.model.VendorProduct;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstrumentApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InstrumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstrumentApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInstrumentCall(OnboardInstrumentRequest onboardInstrumentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onboardInstrumentRequest;

        // create path and map variables
        String localVarPath = "/api/instrument/onboarding/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInstrumentValidateBeforeCall(OnboardInstrumentRequest onboardInstrumentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'onboardInstrumentRequest' is set
        if (onboardInstrumentRequest == null) {
            throw new ApiException("Missing the required parameter 'onboardInstrumentRequest' when calling createInstrument(Async)");
        }

        return createInstrumentCall(onboardInstrumentRequest, _callback);

    }


    private ApiResponse<OnboardInstrumentResponse> createInstrumentWithHttpInfo(OnboardInstrumentRequest onboardInstrumentRequest) throws ApiException {
        okhttp3.Call localVarCall = createInstrumentValidateBeforeCall(onboardInstrumentRequest, null);
        Type localVarReturnType = new TypeToken<OnboardInstrumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInstrumentAsync(OnboardInstrumentRequest onboardInstrumentRequest, final ApiCallback<OnboardInstrumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInstrumentValidateBeforeCall(onboardInstrumentRequest, _callback);
        Type localVarReturnType = new TypeToken<OnboardInstrumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateInstrumentRequest {
        private final OnboardInstrumentRequest onboardInstrumentRequest;

        private APIcreateInstrumentRequest(OnboardInstrumentRequest onboardInstrumentRequest) {
            this.onboardInstrumentRequest = onboardInstrumentRequest;
        }

        /**
         * Build call for createInstrument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createInstrumentCall(onboardInstrumentRequest, _callback);
        }

        /**
         * Execute createInstrument request
         * @return OnboardInstrumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public OnboardInstrumentResponse execute() throws ApiException {
            ApiResponse<OnboardInstrumentResponse> localVarResp = createInstrumentWithHttpInfo(onboardInstrumentRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createInstrument request with HTTP info returned
         * @return ApiResponse&lt;OnboardInstrumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OnboardInstrumentResponse> executeWithHttpInfo() throws ApiException {
            return createInstrumentWithHttpInfo(onboardInstrumentRequest);
        }

        /**
         * Execute createInstrument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OnboardInstrumentResponse> _callback) throws ApiException {
            return createInstrumentAsync(onboardInstrumentRequest, _callback);
        }
    }

    /**
     * [EARLY ACCESS] CreateInstrument: Creates and masters instruments with third party vendors.
     * 
     * @param onboardInstrumentRequest  (required)
     * @return APIcreateInstrumentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateInstrumentRequest createInstrument(OnboardInstrumentRequest onboardInstrumentRequest) {
        return new APIcreateInstrumentRequest(onboardInstrumentRequest);
    }
    private okhttp3.Call enrichInstrumentCall(String vendorProductKey, Identifiers identifiers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identifiers;

        // create path and map variables
        String localVarPath = "/api/instrument/onboarding/enrich";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vendorProductKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vendorProductKey", vendorProductKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrichInstrumentValidateBeforeCall(String vendorProductKey, Identifiers identifiers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vendorProductKey' is set
        if (vendorProductKey == null) {
            throw new ApiException("Missing the required parameter 'vendorProductKey' when calling enrichInstrument(Async)");
        }

        // verify the required parameter 'identifiers' is set
        if (identifiers == null) {
            throw new ApiException("Missing the required parameter 'identifiers' when calling enrichInstrument(Async)");
        }

        return enrichInstrumentCall(vendorProductKey, identifiers, _callback);

    }


    private ApiResponse<EnrichmentResponse> enrichInstrumentWithHttpInfo(String vendorProductKey, Identifiers identifiers) throws ApiException {
        okhttp3.Call localVarCall = enrichInstrumentValidateBeforeCall(vendorProductKey, identifiers, null);
        Type localVarReturnType = new TypeToken<EnrichmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enrichInstrumentAsync(String vendorProductKey, Identifiers identifiers, final ApiCallback<EnrichmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrichInstrumentValidateBeforeCall(vendorProductKey, identifiers, _callback);
        Type localVarReturnType = new TypeToken<EnrichmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIenrichInstrumentRequest {
        private final String vendorProductKey;
        private final Identifiers identifiers;

        private APIenrichInstrumentRequest(String vendorProductKey, Identifiers identifiers) {
            this.vendorProductKey = vendorProductKey;
            this.identifiers = identifiers;
        }

        /**
         * Build call for enrichInstrument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return enrichInstrumentCall(vendorProductKey, identifiers, _callback);
        }

        /**
         * Execute enrichInstrument request
         * @return EnrichmentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public EnrichmentResponse execute() throws ApiException {
            ApiResponse<EnrichmentResponse> localVarResp = enrichInstrumentWithHttpInfo(vendorProductKey, identifiers);
            return localVarResp.getData();
        }

        /**
         * Execute enrichInstrument request with HTTP info returned
         * @return ApiResponse&lt;EnrichmentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EnrichmentResponse> executeWithHttpInfo() throws ApiException {
            return enrichInstrumentWithHttpInfo(vendorProductKey, identifiers);
        }

        /**
         * Execute enrichInstrument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EnrichmentResponse> _callback) throws ApiException {
            return enrichInstrumentAsync(vendorProductKey, identifiers, _callback);
        }
    }

    /**
     * [EARLY ACCESS] EnrichInstrument: Enriches an existing LUSID instrument using vendor data. Enrichment included identifiers, properties and market data.
     * 
     * @param vendorProductKey  (required)
     * @param identifiers  (required)
     * @return APIenrichInstrumentRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIenrichInstrumentRequest enrichInstrument(String vendorProductKey, Identifiers identifiers) {
        return new APIenrichInstrumentRequest(vendorProductKey, identifiers);
    }
    private okhttp3.Call getOpenFigiParameterOptionCall(OpenFigiParameterOptionName parameterName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrument/onboarding/search/openfigi/parameterOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parameterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameterName", parameterName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOpenFigiParameterOptionValidateBeforeCall(OpenFigiParameterOptionName parameterName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parameterName' is set
        if (parameterName == null) {
            throw new ApiException("Missing the required parameter 'parameterName' when calling getOpenFigiParameterOption(Async)");
        }

        return getOpenFigiParameterOptionCall(parameterName, _callback);

    }


    private ApiResponse<List<AllowedParameterValue>> getOpenFigiParameterOptionWithHttpInfo(OpenFigiParameterOptionName parameterName) throws ApiException {
        okhttp3.Call localVarCall = getOpenFigiParameterOptionValidateBeforeCall(parameterName, null);
        Type localVarReturnType = new TypeToken<List<AllowedParameterValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOpenFigiParameterOptionAsync(OpenFigiParameterOptionName parameterName, final ApiCallback<List<AllowedParameterValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOpenFigiParameterOptionValidateBeforeCall(parameterName, _callback);
        Type localVarReturnType = new TypeToken<List<AllowedParameterValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOpenFigiParameterOptionRequest {
        private final OpenFigiParameterOptionName parameterName;

        private APIgetOpenFigiParameterOptionRequest(OpenFigiParameterOptionName parameterName) {
            this.parameterName = parameterName;
        }

        /**
         * Build call for getOpenFigiParameterOption
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOpenFigiParameterOptionCall(parameterName, _callback);
        }

        /**
         * Execute getOpenFigiParameterOption request
         * @return List&lt;AllowedParameterValue&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<AllowedParameterValue> execute() throws ApiException {
            ApiResponse<List<AllowedParameterValue>> localVarResp = getOpenFigiParameterOptionWithHttpInfo(parameterName);
            return localVarResp.getData();
        }

        /**
         * Execute getOpenFigiParameterOption request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AllowedParameterValue&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AllowedParameterValue>> executeWithHttpInfo() throws ApiException {
            return getOpenFigiParameterOptionWithHttpInfo(parameterName);
        }

        /**
         * Execute getOpenFigiParameterOption request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AllowedParameterValue>> _callback) throws ApiException {
            return getOpenFigiParameterOptionAsync(parameterName, _callback);
        }
    }

    /**
     * [EARLY ACCESS] GetOpenFigiParameterOption: Get all supported market sector values for OpenFigi search
     * 
     * @param parameterName  (required)
     * @return APIgetOpenFigiParameterOptionRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOpenFigiParameterOptionRequest getOpenFigiParameterOption(OpenFigiParameterOptionName parameterName) {
        return new APIgetOpenFigiParameterOptionRequest(parameterName);
    }
    private okhttp3.Call retrievePermIdResultCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrument/onboarding/search/permid/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call retrievePermIdResultValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling retrievePermIdResult(Async)");
        }

        return retrievePermIdResultCall(id, _callback);

    }


    private ApiResponse<List<PermIdData>> retrievePermIdResultWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = retrievePermIdResultValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<PermIdData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call retrievePermIdResultAsync(String id, final ApiCallback<List<PermIdData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = retrievePermIdResultValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<PermIdData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIretrievePermIdResultRequest {
        private final String id;

        private APIretrievePermIdResultRequest(String id) {
            this.id = id;
        }

        /**
         * Build call for retrievePermIdResult
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return retrievePermIdResultCall(id, _callback);
        }

        /**
         * Execute retrievePermIdResult request
         * @return List&lt;PermIdData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<PermIdData> execute() throws ApiException {
            ApiResponse<List<PermIdData>> localVarResp = retrievePermIdResultWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute retrievePermIdResult request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PermIdData&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PermIdData>> executeWithHttpInfo() throws ApiException {
            return retrievePermIdResultWithHttpInfo(id);
        }

        /**
         * Execute retrievePermIdResult request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PermIdData>> _callback) throws ApiException {
            return retrievePermIdResultAsync(id, _callback);
        }
    }

    /**
     * [EARLY ACCESS] RetrievePermIdResult: Retrieve PermId results from a previous query.
     * 
     * @param id The execution ID returned by a previous query (required)
     * @return APIretrievePermIdResultRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIretrievePermIdResultRequest retrievePermIdResult(String id) {
        return new APIretrievePermIdResultRequest(id);
    }
    private okhttp3.Call searchOpenFigiCall(String query, Boolean usePermId, Integer limit, String marketSector, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrument/onboarding/search/openfigi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (usePermId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usePermId", usePermId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marketSector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketSector", marketSector));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchOpenFigiValidateBeforeCall(String query, Boolean usePermId, Integer limit, String marketSector, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchOpenFigi(Async)");
        }

        // verify the required parameter 'usePermId' is set
        if (usePermId == null) {
            throw new ApiException("Missing the required parameter 'usePermId' when calling searchOpenFigi(Async)");
        }

        return searchOpenFigiCall(query, usePermId, limit, marketSector, _callback);

    }


    private ApiResponse<OpenFigiSearchResult> searchOpenFigiWithHttpInfo(String query, Boolean usePermId, Integer limit, String marketSector) throws ApiException {
        okhttp3.Call localVarCall = searchOpenFigiValidateBeforeCall(query, usePermId, limit, marketSector, null);
        Type localVarReturnType = new TypeToken<OpenFigiSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchOpenFigiAsync(String query, Boolean usePermId, Integer limit, String marketSector, final ApiCallback<OpenFigiSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchOpenFigiValidateBeforeCall(query, usePermId, limit, marketSector, _callback);
        Type localVarReturnType = new TypeToken<OpenFigiSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsearchOpenFigiRequest {
        private final String query;
        private final Boolean usePermId;
        private Integer limit;
        private String marketSector;

        private APIsearchOpenFigiRequest(String query, Boolean usePermId) {
            this.query = query;
            this.usePermId = usePermId;
        }

        /**
         * Set limit
         * @param limit Only affects results rom OpenFigi general text search (optional, default to 25)
         * @return APIsearchOpenFigiRequest
         */
        public APIsearchOpenFigiRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set marketSector
         * @param marketSector The market sector to search, defaults to &#x60;All&#x60;. (optional, default to All)
         * @return APIsearchOpenFigiRequest
         */
        public APIsearchOpenFigiRequest marketSector(String marketSector) {
            this.marketSector = marketSector;
            return this;
        }

        /**
         * Build call for searchOpenFigi
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchOpenFigiCall(query, usePermId, limit, marketSector, _callback);
        }

        /**
         * Execute searchOpenFigi request
         * @return OpenFigiSearchResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public OpenFigiSearchResult execute() throws ApiException {
            ApiResponse<OpenFigiSearchResult> localVarResp = searchOpenFigiWithHttpInfo(query, usePermId, limit, marketSector);
            return localVarResp.getData();
        }

        /**
         * Execute searchOpenFigi request with HTTP info returned
         * @return ApiResponse&lt;OpenFigiSearchResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OpenFigiSearchResult> executeWithHttpInfo() throws ApiException {
            return searchOpenFigiWithHttpInfo(query, usePermId, limit, marketSector);
        }

        /**
         * Execute searchOpenFigi request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OpenFigiSearchResult> _callback) throws ApiException {
            return searchOpenFigiAsync(query, usePermId, limit, marketSector, _callback);
        }
    }

    /**
     * [EARLY ACCESS] SearchOpenFigi: Search OpenFigi for instruments that match the specified terms.
     * 
     * @param query  (required)
     * @param usePermId Should also search PermId for additional information, defaults to &#x60;false&#x60;. (required)
     * @return APIsearchOpenFigiRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIsearchOpenFigiRequest searchOpenFigi(String query, Boolean usePermId) {
        return new APIsearchOpenFigiRequest(query, usePermId);
    }
    private okhttp3.Call vendorsCall(String marketSector, String securityType, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/instrument/onboarding/vendors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marketSector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marketSector", marketSector));
        }

        if (securityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("securityType", securityType));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vendorsValidateBeforeCall(String marketSector, String securityType, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'marketSector' is set
        if (marketSector == null) {
            throw new ApiException("Missing the required parameter 'marketSector' when calling vendors(Async)");
        }

        // verify the required parameter 'securityType' is set
        if (securityType == null) {
            throw new ApiException("Missing the required parameter 'securityType' when calling vendors(Async)");
        }

        return vendorsCall(marketSector, securityType, limit, _callback);

    }


    private ApiResponse<List<VendorProduct>> vendorsWithHttpInfo(String marketSector, String securityType, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = vendorsValidateBeforeCall(marketSector, securityType, limit, null);
        Type localVarReturnType = new TypeToken<List<VendorProduct>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call vendorsAsync(String marketSector, String securityType, Integer limit, final ApiCallback<List<VendorProduct>> _callback) throws ApiException {

        okhttp3.Call localVarCall = vendorsValidateBeforeCall(marketSector, securityType, limit, _callback);
        Type localVarReturnType = new TypeToken<List<VendorProduct>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIvendorsRequest {
        private final String marketSector;
        private final String securityType;
        private Integer limit;

        private APIvendorsRequest(String marketSector, String securityType) {
            this.marketSector = marketSector;
            this.securityType = securityType;
        }

        /**
         * Set limit
         * @param limit  (optional)
         * @return APIvendorsRequest
         */
        public APIvendorsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Build call for vendors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return vendorsCall(marketSector, securityType, limit, _callback);
        }

        /**
         * Execute vendors request
         * @return List&lt;VendorProduct&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public List<VendorProduct> execute() throws ApiException {
            ApiResponse<List<VendorProduct>> localVarResp = vendorsWithHttpInfo(marketSector, securityType, limit);
            return localVarResp.getData();
        }

        /**
         * Execute vendors request with HTTP info returned
         * @return ApiResponse&lt;List&lt;VendorProduct&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<VendorProduct>> executeWithHttpInfo() throws ApiException {
            return vendorsWithHttpInfo(marketSector, securityType, limit);
        }

        /**
         * Execute vendors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<VendorProduct>> _callback) throws ApiException {
            return vendorsAsync(marketSector, securityType, limit, _callback);
        }
    }

    /**
     * [EARLY ACCESS] Vendors: Gets the VendorProducts of any supported and licenced integrations for a given market sector and security type.
     * 
     * @param marketSector  (required)
     * @param securityType  (required)
     * @return APIvendorsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIvendorsRequest vendors(String marketSector, String securityType) {
        return new APIvendorsRequest(marketSector, securityType);
    }
}
